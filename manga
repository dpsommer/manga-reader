#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import click

from reader.exceptions import NoSuchSource
from reader.search import SearchEngine
from reader.sources import SourceFactory, SOURCES
from reader.utils import Downloader

DEFAULT_SOURCE = 'mangareader'


@click.group()
def cli():
    pass


@click.command()
@click.argument('query')
def search(query):
    search_engine = SearchEngine()
    if search_engine._index.is_empty():
        click.echo("Missing or empty manga index. Rebuilding index for all sources.")
        for source_class in SOURCES:
            source = SourceFactory.instance(source_class)
            manga = source.get_manga_list()
            click.echo(f"Collecting all manga from {source_class.__name__}...")
            indexable_documents = []
            with click.progressbar(length=len(manga)) as bar:
                for document in source.generate_indexable_documents(manga):
                    bar.update(1)
                    indexable_documents.append(document)
            click.echo(f"Found {len(indexable_documents)} manga.")
            click.echo(f"Building {source_class.__name__} index...")
            with click.progressbar(indexable_documents) as bar:
                search_engine.index(bar)
            click.echo("Done.")
    results = search_engine.search(query)
    for result in results:
        click.echo(result)


@click.command()
@click.argument('title')
@click.option('-s', '--source')
@click.option('-c', '--chapter')
def download(title, source, chapter):
    try:
        downloader = Downloader()
        source = SourceFactory.instance(source or DEFAULT_SOURCE)
        manga = source.get_manga(title)
        if chapter:
            downloader.download_chapter(manga, chapter)
            click.echo(f'Finished downloading "{manga.title}" chapter #{chapter.number}')
        else:
            downloader.download_manga(manga)
            click.echo(f'Finished downloading all chapters of "{manga.title}"')
    except NoSuchSource as e:
        click.echo(f"Encountered an error: {str(e)} for given source '{source}'")


@click.command()
def read():
    pass


@click.command()
def version():
    with open('version', 'r') as f:
        click.echo(f"Version {f.read()}")

cli.add_command(search)
cli.add_command(download)
cli.add_command(read)
cli.add_command(version)


if __name__ == '__main__':
    cli()
