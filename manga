#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import threading
from concurrent.futures import ThreadPoolExecutor, as_completed

import click

from reader.exceptions import NoSuchSource
from reader.manga import Manga, Chapter, Page
from reader.search import SearchEngine, DEFAULT_RESULT_COUNT
from reader.sources import SourceFactory, SOURCES
from reader.utils import Downloader, MANGA_DOWNLOAD_DIRECTORY

DEFAULT_SOURCE = 'mangareader'
MAX_WORKERS = 100

executor = ThreadPoolExecutor(max_workers=MAX_WORKERS)
thread_context = threading.local()


@click.group()
def cli():
    pass


@click.command()
@click.argument('query')
@click.option('-r', '--results')
def search(query, results):
    search_engine = SearchEngine()
    if search_engine._index.is_empty():
        click.echo("Missing or empty manga index. Rebuilding index for all sources.")
        build_search_engine_index(search_engine)
    result_count = int(results or DEFAULT_RESULT_COUNT)
    results = search_engine.search(query, results_count=result_count)
    for result in results:
        click.echo(result)


def build_search_engine_index(search_engine, sources=SOURCES):
    for source in sources:
        click.echo(f"Collecting all manga from {source.__class__.__name__}...")
        indexable_documents = collect_indexable_documents(source)
        click.echo(f"Found {len(indexable_documents)} manga.")
        click.echo(f"Building {source.__class__.__name__} index...")
        show_indexing_progress_bar(search_engine, indexable_documents)
        click.echo(f"Finished indexing {source.__class__.__name__}.")


def collect_indexable_documents(source):
    manga = source.get_manga_list()
    parser = source.get_document_parser(thread_context)
    indexable_documents = []
    futures = [executor.submit(parser.parse, title) for title in manga]
    with click.progressbar(length=len(futures)) as bar:
        for future in as_completed(futures):
            try:
                bar.update(1)
                indexable_documents.append(future.result())
            except Exception:
                pass
    return indexable_documents


def show_indexing_progress_bar(search_engine, documents):
    with click.progressbar(documents) as bar:
        search_engine.index(bar)


@click.command()
@click.argument('title')
@click.option('-s', '--source')
@click.option('-c', '--chapter')
@click.option('-f', '--force', is_flag=True)
def download(title, source, chapter, force):
    try:
        downloader = Downloader()
        source = SourceFactory.instance(source or DEFAULT_SOURCE)
        scraper = source.get_scraper(title)
        if chapter:
            click.echo(f"Downloading {title} chapter {chapter} from {source.__class__.__name__}.")
            pages = scraper.get_pages(chapter)
            downloader.download_chapter(title, Chapter(chapter, pages=pages), force=force)
            click.echo(f'Finished downloading "{title}" chapter #{chapter}')
        else:
            click.echo(f"Downloading {title} from {source.__class__.__name__}.")
            click.echo(f"Gathering links to all chapters and images...")
            chapter_list = scraper.get_chapters()
            chapters = []
            futures = {executor.submit(scraper.get_pages, chapter): chapter for chapter in chapter_list}
            with click.progressbar(length=len(futures)) as bar:
                for future in as_completed(futures):
                    try:
                        bar.update(1)
                        chapters.append(Chapter(futures[future], pages=future.result()))
                    except Exception:
                        pass
            click.echo("Done.")
            manga = Manga(title, chapters=chapters)
            click.echo("Downloading chapters...")
            futures = {executor.submit(downloader.download_chapter, manga.title, chapter, force): chapter for chapter in manga.chapters}
            failed_chapters = []
            with click.progressbar(length=len(futures)) as bar:
                for future in as_completed(futures):
                    try:
                        bar.update(1)
                        future.result()
                    except Exception:
                        chapter = futures[future]
                        failed_chapters.append(chapter.number)
        for chapter in failed_chapters:
            click.echo(f'Download of chapter {chapter} failed mid-way: some pages could not be downloaded.')
            click.echo('Please try redownloading this chapter with the --force flag.')
        click.echo(f'Finished downloading all chapters of "{manga.title}"')
    except NoSuchSource as e:
        click.echo(f"Encountered an error: {str(e)} for given source '{source}'")


@click.command()
@click.argument('manga')
@click.option('-c', '--chapter')
def read(manga, chapter):
    pass


@click.command()
def version():
    with open('version', 'r') as f:
        click.echo(f"Version {f.read()}")

cli.add_command(search)
cli.add_command(download)
cli.add_command(read)
cli.add_command(version)


if __name__ == '__main__':
    with executor:
        cli()
